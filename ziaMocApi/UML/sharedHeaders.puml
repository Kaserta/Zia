@startuml





/' Objects '/

class AModule {
	+AModule(std::string name)
	+~AModule()
	+operator<<(std::string &) : AModule&
	+operator>>(std::string &) : AModule&
	-m_storage : std::map<std::string, std::string>
	#m_gestConfig : std::shared_ptr<std::string>
	+loadConfig(const std::string& filePath) : std::shared_ptr<std::string>&
	#m_name : std::string
	+getName() : std::string&
	-entry(const std::string& str) : void
	-output(std::string& buffer) : void
}


class Api {
}


class Html {
	+Html()
	+~Html()
}


class Http {
	+Http()
	+~Http()
}


abstract class IModule {
	+~IModule()
	+{abstract} getName() : std::string&
}


class Mediator {
	+Mediator()
	+~Mediator()
	-m_name : std::string
	-m_modules : std::vector<std::shared_ptr<IModule> >
	+setUpConf(std::pair<std::shared_ptr<IModule>, std::shared_ptr<std::string> >) : void
}


class ModuleManager {
	+ModuleManager(std::string pathToConf)
	-m_mediator : std::shared_ptr<Mediator>
	-m_name : std::string
	-m_pathToConf : std::string
	-m_modules : std::vector<std::shared_ptr<AModule> >
	-m_SharedList : std::vector<std::string>
	-m_moduleList : std::vector<std::string>
	-createMediator() : void
	-loadModules() : void
	-threadMoc() : void
}


class PhpCGI {
	+PhpCGI()
	+~PhpCGI()
}


class SSLRequest {
	+SSLRequest()
	+~SSLRequest()
}





/' Inheritance relationships '/

AModule <|-- Html


AModule <|-- Http


AModule <|-- PhpCGI


AModule <|-- SSLRequest


IModule <|-- AModule





/' Aggregation relationships '/

Mediator *-- IModule


ModuleManager *-- AModule


ModuleManager *-- Mediator





@enduml
